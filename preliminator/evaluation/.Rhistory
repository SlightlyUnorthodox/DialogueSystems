3 2 2 3 0
3 2 2 4 0
3 2 2 5 0
4 1 1 1 13
4 1 1 2 10
4 1 1 3 0
4 1 1 4 2
4 1 1 5 2
4 1 2 1 9
4 1 2 2 0
4 1 2 3 0
4 1 2 4 1
4 1 2 5 2
4 2 1 1 3
4 2 1 2 9
4 2 1 3 1
4 2 1 4 0
4 2 1 5 1
4 2 2 1 8
4 2 2 2 1
4 2 2 3 0
4 2 2 4 0
4 2 2 5 1"
con <- textConnection(lines)
food <- read.csv(con, sep = " ")
close(con)
food <- read.table(con)
con <- textConnection(lines)
food <- read.table(con)
head(food)
con <- textConnection(lines)
food <- read.table(con, header = TRUE)
head(food)
food = food[, !(names(food) %in% 'gender')]
head(food)
library(dplyr)
ddply(food, "count", numcolwise(sum))
library(plyr)
# Remove gender and consolidate
food = food[, !(names(food) %in% 'gender')]
ddply(food, "count", numcolwise(sum))
con <- textConnection(lines)
food <- read.table(con, header = TRUE)
names(food)
food = food[, !(names(food) %in% 'gender')]
food = aggregate(count ~ lake + size + food, date = food, FUN = sum)
names(food)
library(plyr)
con <- textConnection(lines)
food <- read.table(con, header = TRUE)
ddply(food, "gender", numcolwise(sum))
food = food[, !(names(food) %in% 'gender')]
ddply(food, "count", numcolwise(sum))
ddply(food, "count", numcolwise(sum))
ddply(food, c("lake", "size", "food"), numcolwise(sum))
?glm
food.model <- glm(count ~ lake + size + food, data = food, family = "gaussian")
summary(food.model)
food.model <- glm(food ~ lake + size, data = food, family = "gaussian")
summary(food.model)
food.model <- glm(count ~ lake + size, data = food, family = "gaussian")
summary(food.model)
z.score <- (125 - 2)/((125 + 2)^(1/2))
z.score
pnorm(z.score)
1 - pnorm(z.score)
?pnrom
?pnorm
pnorm(z.score, lower.tail)
print(2*(1 - pnorm(z.score)))
total <- 833 + 2 + 125 + 160
(835 / total)
prop.hell <- total.hell / total
total <- 833 + 2 + 125 + 160
total.heaven <- 833 + 2
total.hell <- 125 + 160
# Get proportions
prop.heaven <- total.heaven / total
prop.hell <- total.hell / total
prop.heaven
prop.hel
prop.hell
total
lower.bound <- 0.110 - (1.645)((((125 + 2) - ((125 - 2)^2) / total)^(1/2))/total)
lower.bound <- 0.110 - (1.645)((((125 + 2) - ((125 - 2)^2) / total)^(1/2))/total)
(1.645)((((125 + 2) - ((125 - 2)^2) / total)^(1/2))/total)
lower.bound <- 0.110 - 0.016
upper.bound <- 0.110 + 0.016
print(paste(as.character(lower.bound), as.character(upper.bound))
```
upper.bound <- 0.110 + 0.016
print(paste(as.character(lower.bound), as.character(upper.bound)))
lower.bound <- 0.110 - (1.645)*((((125 + 2) - ((125 - 2)^2) / total)^(1/2))/total)
upper.bound <- 0.110 + (1.645)*((((125 + 2) - ((125 - 2)^2) / total)^(1/2))/total)
lower.bound
upper.bound
setwd("~/evaluation")
install.packages("RJSONIO")
library("RCurl")
library(RJSONIO)
library(RCurl)
getwd()
dir()
dir()[grep(".json", dir())]
"x" <- 1
x
"x" <-
5
x
for(file in dir()[grep(".json", dir())]) {
print(file)
}
for(file in dir()[grep(".json", dir())]) {
print(gsub(".json", "", file))
}
x <- "s"
s <- 1
x
eval(parse(x))
?parse
eval(parse(x, text = TRUE))
eval(parse(text = x))
# Load necessary packages
library(RJSONIO)
library(RCurl)
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(file.name)
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
?fromJSON
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(paste(readLines(file.name), collapse = ""))
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(paste(readLines(file), collapse = ""))
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
fromJSON(file)
fromJSON(paste(readLines(file), collapse = ""))
Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(paste(readLines(file), collapse = ""))
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(file = file)
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
?fromJSON
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(paste(readLines(file, warn = FALSE), collapse = ""))
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
# Co
dir()
for(file in dir()[grep(".json", dir())])
{ print(file)}
# Load necessary packages
library(RJSONIO)
library(RCurl)
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
eval(parse(text = file.name)) <- fromJSON(paste(readLines(file, warn = FALSE), collapse = ""))
# Coerce to dataframe
eval(parse(text = file.name)) <- do.call(rbind, eval(parse(text = file.name)))
}
traceback()
eval(parse(text = file.name))
file.name
assign(file.name, 3)
eval(file.name)
# Load necessary packages
library(RJSONIO)
library(RCurl)
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Coerce to dataframe
assign(file.name, do.call(rbind, eval(parse(text = file.name))))
}
candidate
file.name <- gsub(".json", "", file)
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
file.name
user
o
assign(file.name, do.call(rbind, eval(parse(text = file.name))))
user
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
length(user)
do.call(rbind, user)
transcript
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
user
user[[1]]
user[[]]
unlist(user)
data.frame(matrix(unlist(user)))
data.frame(matrix(unlist(user), ncol = 4, byrow = T))
data.frame(matrix(unlist(user), ncol = 4, byrow = TRUE))
data.frame(matrix(unlist(user), ncol = 5, byrow = TRUE))
data.frame(matrix(unlist(user), ncol = 3, byrow = TRUE))
data.frame(matrix(unlist(user), ncol = 4, byrow = TRUE))
user
user[[1]]
user[[1]][1]
user[[1]][2]
user[[1]][3]
unlist(user[[1]][3])
length(unlist(user[[1]][3]))
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Coerce to dataframe
#assign(file.name, do.call(rbind, eval(parse(text = file.name))))
}
transcript
user
candidate
candidate[[1]]
candidate[[1]]$fields
unlist(candidate[[1]]$fields)
unlist(candidate$fields)
unlist(candidate[[]]$fields)
unlist(candidate[[1]]$fields)
sapply(candidate$fields, "[[", 1)
sapply(candidate$fields, "[[")
sapply(candidate, "[[", 3)
lapply(candidate, "[[", 3)
unlistlapply(candidate, "[[", 3))
unlist(lapply(candidate, "[[", 3))
file.name
user[[1]]
user[[1]]$fields
length(user[[1]]$fields)
length(candidate[[1]]$fields)
file.name <- gsub(".json", "", file)
file.name
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
user
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
num.col
a
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(eval(parse(text = file.name))), ncol = num.col, byrow = TRUE)))
user
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
user
file.name
user
user[[1]]$fields
user[[20]]$fields
user[[200]]$fields
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(eval(parse(text = file.name))), ncol = num.col, byrow = TRUE)))
user
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
length(user)
assign(file.name, do.call(rbind, eval(parse(text = file.name))))
user
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(eval(parse(text = file.name))), ncol = num.col, byrow = TRUE)))
user
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
eval(parse(text = file.name))
eval(parse(text = file.name))$fields
unlist(eval(parse(text = file.name)))
sapply(eval(parse(text = file.name)), "[[", 3)
unlist(sapply(eval(parse(text = file.name)), "[[", 3))
matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)))
matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = 2)
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
# Bind results
assign(file.name, do.call(rbind, eval(parse(text = file.name))))
}
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
# Bind results
assign(file.name, do.call(rbind, eval(parse(text = file.name))))
}
candidate
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
}
user
head(user)
file.name
eval(parse(text = file.name))
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
eval(parse(text = file.name))
eval(parse(text = file.name))$fields
eval(parse(text = file.name))[[1]]
eval(parse(text = file.name))[[1]]$fields
names(eval(parse(text = file.name))[[1]]$fields)
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Save field names
field.names <- names(eval(parse(text = file.name))[[1]]$fields)
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
# Re-establish field names
names(eval(parse(text = file.name))) <- field.names
}
file.name <- gsub(".json", "", file)
file.name
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Save field names
field.names <- names(eval(parse(text = file.name))[[1]]$fields)
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
eval(parse(text = file.name))
names(val(parse(text = file.name)))
names(eval(parse(text = file.name)))
field.names
names(eval(parse(text = file.name))) <- field.names
names(eval(parse(text = file.name)))
names(eval(parse(text = file.name))) <- field.names
field.names
names(eval(parse(text = file.name)))
assign(names(eval(parse(text = file.name))), field.names)
head(candidate)
names(eval(parse(text = file.name)))
head(candidate)
field.names
?data.frame
colnames(eval(parse(text = file.name))) <- field.names
file
file.name
file.name
colnames(eval(parse(text =file.name)))
i <- 1
for(name in colnames(eval(parse(text = file.name)))) {
colnames(eval(parse(text = file.name)))[name] <- field.names[i]
i <- i + 1
}
file.name
assign(names(file.name)), field.names)
assign(names(file.name), field.names)
temp <- eval(parse(text = file.name))
temp
temp <- eval(parse(text = file.name))
colnames(temp) <- file.names
colnames(temp) <- field.names
assign(file.name, temp)
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Save field names
field.names <- names(eval(parse(text = file.name))[[1]]$fields)
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE)))
# Re-establish field names
temp <- eval(parse(text = file.name))
colnames(temp) <- field.names
assign(file.name, temp)
}
# Convert json frames to reada
head(user)
head(transcript)
tail(transcript)
transcript
nrows(transcript)
nrow(transcript)
transcript
curr_interview <- 1
for(row in 2:nrow(transcript)) {
print(row)
}
curr_interview <- 1
for(row in 2:nrow(transcript)) {
if (transcript[row, "line_number"] == 0) {
print(TRUE)
}
}
transcript[, c("interview", "row_number")]
transcript[, c("interview", "line_number")]
curr_interview <- 1
for(row in 2:nrow(transcript)) {
if (transcript[row, "line_number"] == 0) {
curr_interview <- curr_interview + 1
}
transcript[row, "interview"] == curr_interview
}
transcript[, c("interview", "line_number")]
curr_interview <- 1
for(row in 2:nrow(transcript)) {
if (transcript[row, "line_number"] == 0) {
curr_interview <- curr_interview + 1
}
transcript[row, "interview"] <- curr_interview
}
transcript[, c("interview", "line_number")]
?data.frame
# Import data from json files
for(file in dir()[grep(".json", dir())]) {
# Strip file tag
file.name <- gsub(".json", "", file)
# Read in data from json file
assign(file.name, fromJSON(paste(readLines(file, warn = FALSE), collapse = "")))
# Save field names
field.names <- names(eval(parse(text = file.name))[[1]]$fields)
# Get number of columns
num.col <- length(eval(parse(text = file.name))[[1]]$fields)
# Coerce to dataframe
assign(file.name, data.frame(matrix(unlist(sapply(eval(parse(text = file.name)), "[[", 3)), ncol = num.col, byrow = TRUE), stringsAsFactors = FALSE))
# Re-establish field names and set all variables as characters
temp <- eval(parse(text = file.name))
colnames(temp) <- field.names
assign(file.name, temp)
}
# Manually fix interview number bug (always '1')
curr_interview <- 1
for(row in 2:nrow(transcript)) {
if (transcript[row, "line_number"] == 0) {
curr_interview <- curr_interview + 1
}
transcript[row, "interview"] <- curr_interview
}
transcript[, c("interview", "line_number")]
head(postsurvey)
postsurvey
